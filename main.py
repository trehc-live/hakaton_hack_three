import telebot
from telebot import types
import re
import requests_funcs as rf
from config import base_url, secret_key, headers, sbpMerchantId, user_file_path, admin_file_path, bot_key # type: ignore
import pandas as pd
import uuid

bot = telebot.TeleBot(bot_key)
is_admin = False
is_user = False
is_waiting_for_password = False

def add_admin(message: types.Message) -> bool:
    '''–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'''
    if is_person_known(message, admin_file_path):
        return False
    fileOpen = open(admin_file_path, 'a', encoding='utf-8')
    fileOpen.write(f'{message}\n')
    fileOpen.close()
    return True

def delete_admin(message) -> bool:
    '''–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'''
    if not is_person_known_str(message.text, admin_file_path):
        return '–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
    with open(admin_file_path, "r", encoding='utf-8') as fileOpen:
        lines = fileOpen.readlines()
    with open(admin_file_path, "w", encoding='utf-8') as fileOpen:
        for line in lines:
            if line != f'{str(message.text)}\n':
                fileOpen.write(line)
    return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'


def is_person_known(message: types.Message, file_path: str) -> bool:
    '''–ò—â–µ—Ç —é–∑–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Ç–µ–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ–µ –∑–∞–Ω—á–µ–Ω–∏–µ'''
    person_data = pd.read_csv(file_path, dtype=str)
    id = str(message.from_user.id)
    if person_data.query("login == @id").empty:
        return False
    return True

def is_person_known_str(message: str, file_path: str) -> bool:
    '''–ò—â–µ—Ç —é–∑–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Ç–µ–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ–µ –∑–∞–Ω—á–µ–Ω–∏–µ'''
    person_data = pd.read_csv(file_path, dtype=str)
    if person_data.query("login == @message").empty:
        return False
    return True


def add_user(message: types.Message) -> str:
    '''–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏'''
    if is_person_known(message, user_file_path):
        return '–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ'
    with open(user_file_path, 'a', encoding='utf-8') as file:
        file.write(f'{message.text}\n')
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'

def delete_user(message) -> None:
    '''—É–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏'''
    if not is_person_known_str(message.text, user_file_path):
        return '–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
    with open(user_file_path, "r", encoding='utf-8') as fileOpen:
        lines = fileOpen.readlines()
    with open(user_file_path, "w", encoding='utf-8') as fileOpen:
        for line in lines:
            if line != f'{str(message.text)}\n':
                fileOpen.write(line)
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'

def get_qr_status_by_id(message):
    '''–≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å qr-–∫–æ–¥–∞'''
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ id qr-–∫–æ–¥–∞, –ø—Ä–∏–º–µ—Ä: AD4EE12A105D4F5EA234BABFCA10E178')
    def step(message):
        if re.match(r'[a-zA-Z0-9]{32}', message.text):
            dict = rf.get_qr_request(base_url + message.text, None, {'Authorization': f'Bearer {secret_key}'})
            bot.send_message(message.chat.id, dict['qrStatus'])
        else:
            bot.send_message(message.chat.id, '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!')
    bot.register_next_step_handler(message, step)

def create_qr_code(message):
    '''—Å–æ–∑–¥–∞—ë—Ç qr-–∫–æ–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ img, id –∏ —Å—Å—ã–ª–∫—É'''
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞')
    def step(message):
        if re.match(r'\d*', message.text):
            dict = rf.create_qr_request(base_url, { "qrType": "QRDynamic", "amount": message.text, "order": generate_order(), "sbpMerchantId": sbpMerchantId })
            try:
                bot.send_photo(message.chat.id, dict['qrUrl'], 'Id qr-–∫–æ–¥–∞ ' + dict['qrId'])
                bot.send_message(message.chat.id, '—Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã - ' + dict['payload'])
            except:
                bot.send_message(message.chat.id, dict)
        else:
            bot.send_message(message.chat.id, '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!')
    bot.register_next_step_handler(message, step)

def get_qr_code(message):
    '''–≤—ã–≤–æ–¥–∏—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É qr-–∫–æ–¥–∞'''
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ id qr-–∫–æ–¥–∞, –ø—Ä–∏–º–µ—Ä: AD4EE12A105D4F5EA234BABFCA10E178')
    def step(message):
        if re.match(r'[a-zA-Z0-9]{32}', message.text):
            dict = rf.get_qr_request(base_url + message.text, None, {'Authorization': f'Bearer {secret_key}'})
            bot.send_message(message.chat.id, dict['payload'])
        else:
            bot.send_message(message.chat.id, '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!')
    bot.register_next_step_handler(message, step)

def delete_qr_code(message):
    '''—É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π qr-–∫–æ–¥'''
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ id qr-–∫–æ–¥–∞, –ø—Ä–∏–º–µ—Ä: AD4EE12A105D4F5EA234BABFCA10E178')
    def step(message):
        if re.match(r'[a-zA-Z0-9]{32}', message.text):
            dict = rf.delete_qr_request(base_url + message.text, None, {'Authorization': f'Bearer {secret_key}'})
            bot.send_message(message.chat.id, dict)
        else:
            bot.send_message(message.chat.id, '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!')
    bot.register_next_step_handler(message, step)


def generate_order() -> str:
    return str(uuid.uuid1())


def verification(message: types.Message) -> str:
    '''–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–∞—Ö'''
    if is_person_known(message, admin_file_path):
        return 'admin'
    
    if is_person_known(message, user_file_path):
        return 'user'

    return 'unknown'


def user_btns_init(message) -> None:
    '''—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —é–∑–µ—Ä–∞'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üÜî–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ id")
    markup.add(btn1)
    bot.send_message(message.chat.id, text="–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑", reply_markup=markup)

def admin_btns_init(message) -> None:
    '''—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞'''
    markup = types.ReplyKeyboardMarkup(
    resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úÖ–î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞")
    btn2 = types.KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞")
    btn3 = types.KeyboardButton("üÜî–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ id")
    btn4 = types.KeyboardButton("üìä—Å–æ–∑–¥–∞—Ç—å qr-code")
    btn5 = types.KeyboardButton("üí∏–Ω–∞–π—Ç–∏ qr-code")
    btn6 = types.KeyboardButton("üõ†Ô∏è—É–¥–∞–ª–∏—Ç—å qr-code")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    bot.send_message(message.chat.id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Ö–æ–∑—è–∏–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å", reply_markup=markup)


def password_pass(message) -> bool:
    '''—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    person_data = pd.read_csv(admin_file_path, dtype=str)
    tg_id = str(message.from_user.id)
    if person_data.query("password == @message.text and login == @tg_id").empty:
        return False
    else:
        return True


@bot.message_handler(commands=['start'])
def init(message):
    '''—Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'''
    #bot.send_message(message.chat.id, message.from_user)
    global is_admin, is_user, is_waiting_for_password
    verif = verification(message)
    if verif == 'admin':
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–∂–∏–¥–∞—é –ø–∞—Ä–æ–ª—å')
        is_waiting_for_password = True
        return
    if verif == 'user':
        is_user = True
        user_btns_init(message)
        return
    else:
        bot.send_message(message.chat.id, text="–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ;(")
    return


@bot.message_handler(content_types=['text'])
def main(message):
    '''–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    global is_admin, is_user, is_waiting_for_password

    if is_waiting_for_password:
        if password_pass(message):
            is_waiting_for_password = False
            is_admin = True
            admin_btns_init(message)
            return
        bot.send_message(message.chat.id, text="–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    if not (is_user or is_admin):
        bot.send_message(message.chat.id, text="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ—Ç–∏")
    elif message.text == 'üÜî–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ id':
        get_qr_status_by_id(message)
        return
    elif not is_admin:
        bot.send_message(message.chat.id, text="–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π")
        return
    elif message.text == "‚úÖ–î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞":

        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        def step(message):
            bot.send_message(message.chat.id, add_user(message))
        bot.register_next_step_handler(message, step)
        
        return
    elif message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞":
        
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        def step(message):
            bot.send_message(message.chat.id, delete_user(message))
        bot.register_next_step_handler(message, step)
        
        return
    elif message.text == 'üìä—Å–æ–∑–¥–∞—Ç—å qr-code':
        create_qr_code(message)
        return

    elif message.text == 'üí∏–Ω–∞–π—Ç–∏ qr-code':
        get_qr_code(message)
        return
    elif message.text == 'üõ†Ô∏è—É–¥–∞–ª–∏—Ç—å qr-code':
        delete_qr_code(message)
        return
    else:
        bot.send_message(message.chat.id,'–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∑–∞–ø—Ä–æ—Å')
bot.polling(none_stop=True)
